/*******************************************************************************
 *
 * This file is part of libcommute, a C++11/14/17 header-only library allowing
 * to manipulate polynomial expressions with quantum-mechanical operators.
 *
 * Copyright (C) 2016-2019 Igor Krivenko <igor.s.krivenko@gmail.com>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 ******************************************************************************/
#ifndef LIBCOMMUTE_BASIS_SPACE_FERMION_HPP_
#define LIBCOMMUTE_BASIS_SPACE_FERMION_HPP_

#include "../algebra_tags.hpp"
#include "../metafunctions.hpp"
#include "../utility.hpp"

#include "basis_space.hpp"

namespace libcommute {

//
// 2-dimensional basis space generated by one fermionic degree of freedom
//

template<typename... IndexTypes>
class basis_space_fermion : public basis_space<IndexTypes...> {

  using base = basis_space<IndexTypes...>;

public:

  // Value symantics
  basis_space_fermion() = delete;
  template<typename... Args>
  basis_space_fermion(Args&&... indices)
    : base(std::forward<Args>(indices)...) {}
  basis_space_fermion(basis_space_fermion const&) = default;
  basis_space_fermion(basis_space_fermion&&) noexcept = default;
  basis_space_fermion& operator=(basis_space_fermion const&) = default;
  basis_space_fermion& operator=(basis_space_fermion&&) noexcept = default;

  // Make a smart pointer that manages a copy of this basis space
  virtual std::unique_ptr<base> clone() const {
#ifndef LIBCOMMUTE_NO_STD_MAKE_UNIQUE
    using std::make_unique;
#endif
    return make_unique<basis_space_fermion>(*this);
  }

  // ID of the algebra this basis space is associated with
  virtual int algebra_id() const override { return fermion::algebra_id(); }

  // The minimal number of binary digits needed to represent any state
  // in this basis space
  virtual int n_bits() const override { return 1; }
};

namespace static_indices {

// Convenience factory function
template<typename... IndexTypes>
inline basis_space_fermion<c_str_to_string_t<IndexTypes>...>
make_space_fermion(IndexTypes&&... indices) {
  return {std::forward<IndexTypes>(indices)...};
}

} // namespace libcommute::static_indices
} // namespace libcommute

#if __cplusplus >= 201703L
#include "../expression/dyn_indices.hpp"

namespace libcommute {
namespace dynamic_indices {

// Convenience factory function for dynamic indices
template<typename... IndexTypes>
inline basis_space_fermion<dyn_indices>
make_space_fermion(IndexTypes&&... indices) {
  return {dyn_indices(std::forward<IndexTypes>(indices)...)};
}

} // namespace libcommute::dynamic_indices
} // namespace libcommute
#endif

#endif
